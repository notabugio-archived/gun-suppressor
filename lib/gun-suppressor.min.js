!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("route-parser"),require("route-parser/lib/route/visitors/regexp"),require("ajv")):"function"==typeof define&&define.amd?define("gun-suppressor",["ramda","route-parser","route-parser/lib/route/visitors/regexp","ajv"],t):"object"==typeof exports?exports["gun-suppressor"]=t(require("ramda"),require("route-parser"),require("route-parser/lib/route/visitors/regexp"),require("ajv")):e["gun-suppressor"]=t(e.ramda,e["route-parser"],e["route-parser/lib/route/visitors/regexp"],e.ajv)}("undefined"!=typeof self?self:this,function(e,t,r,n){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initAjv=m,t.createSuppressor=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.init,r=void 0===t?m:t,a=e.id,s=void 0===a?"http://example.com/schemas/gun-schema.json":a,u=e.jsonSchema,d=void 0===u?"http://json-schema.org/draft-07/schema#":u,l=e.title,f=void 0===l?"Gun Message Schema":l,y=e.description,g=void 0===y?"A defintion for the gunDB wire protocol":y,h=e.definitions,b=void 0===h?c:h,v=[],j=(0,n.keys)(b).reduce(function(e,t){var r=(0,n.path)([t,"soul"],e)||{},a=r.pattern;if(!a)return e;var s,u=new o.default(a),d=function(t){var r=(0,n.path)(t,e),o=(0,n.prop)("$refs",r),i=(0,n.prop)("refName",p.match(o||""));return i?(0,n.prop)(i,e):r};return v.push(t),(0,n.compose)((0,n.assocPath)([t,"$async"],!0),(0,n.assoc)("".concat(t,"Soul"),{type:"string",pattern:function(e){var t=i.default.visit(e.ast).re.toString();return t.slice(1,t.length-1)}(u)}),(0,n.assoc)("".concat(t,"Edge"),{type:"object",additionalProperties:!1,properties:{"#":{$ref:"#/definitions/".concat(t,"Soul")}},required:["#"]}),(0,n.assocPath)([t,"required"],[].concat(function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(s=(0,n.path)([t,"required"],e)||[])||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(s)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}(),["_"])),(0,n.assocPath)([t,"properties","_"],{type:"object",allOf:[{$ref:"#/definitions/GunNodeMeta"}],properties:{"#":{$ref:"#/definitions/".concat(t,"Soul")},">":{type:"object",properties:(0,n.keys)(d([t,"properties"])).reduce(function(e,t){return(0,n.assoc)(t,{type:"number"},e)},{}),patternProperties:(0,n.keys)(d([t,"patternProperties"])).reduce(function(e,t){return(0,n.assoc)(t,{type:"number"},e)},{})}}}))(e)},b),S={$id:s,$schema:d,$async:!0,title:f,description:g,anyOf:[{$ref:"#/definitions/GunMsg"}],definitions:{GunMsg:{$async:!0,type:"object",required:["#"],additionalProperties:!1,properties:{"#":{title:"Message Identifier",description:"This should be a globally unique identifier",type:"string"},"##":{title:"Fast Hash Value?",description:"I have no idea how this is calculated",type:"number"},"@":{title:"Responding To",description:"The message identifier this message is responding to",type:"string"},"><":{title:"Adjacent Peers",description:"Not really sure how this works",type:"string"},how:{title:"Used for debugging",description:"Shouldn't actually be sent over wire (but it is)",type:"string"},err:{anyOf:[{type:"null"},{type:"string"}]},leech:{title:"Leech Command",description:"Gun protocol extension added by pistol",type:"boolean"},get:{title:"Get Command",description:"A request for graph data",type:"object",additionalProperties:!1,required:["#"],properties:{"#":{description:"The soul to request data for",anyOf:v.map(function(e){return{$ref:"#/definitions/".concat(e,"Soul")}})},".":{description:"Request a single property?",type:"string"}}},put:{$async:!0,title:"Put Command",description:"A payload of graph data",type:"object",additionalProperties:{anyOf:v.map(function(e){return{$ref:"#/definitions/".concat(e)}})}}}},GunChangeStates:{type:"object",title:"Gun Change States",description:"A map of property names to update timestamps",patternProperties:{".*":{type:"number"}}},GunNodeMeta:{title:"Gun Node Metadata",description:"Change State and soul of a gun node",type:"object",additionalProperties:!1,properties:{"#":{title:"Soul",type:"string"},">":{$ref:"#/definitions/GunChangeStates"}},required:["#",">"]},GunEdge:{type:"object",additionalProperties:!1,properties:{"#":{type:"string"}},required:["#"]},...j}},P=r();return P.addSchema({$id:"schema.json",definitions:S.definitions}),{schema:S,validate:P.compile(S)}},t.PERMISSIVE_SCHEMA=void 0;var n=r(1),o=s(r(2)),i=s(r(3)),a=s(r(4));function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=new o.default("#/definitions/:refName");var d={Node:{title:"Gun Node",description:"Any node supported by gun",$async:!0,additionalProperties:{anyOf:[{$ref:"#/definitions/GunEdge"},{type:"null"},{type:"string"},{type:"number"},{type:"boolean"}]},soul:{pattern:"*soul",properties:{soul:{type:"string"}},required:["soul"]}}};t.PERMISSIVE_SCHEMA=d;var c=d,l=function(e){return function(t,r){var i=t||{},a=i.pattern,s=u(i,["pattern"]),p=a&&new o.default(a);return function(t,r,o,i){var u=(0,n.path)(["_","#"],t);if(!u||!a||u!==i)return!1;var d=p.match(u);return!!d&&e.compile(s)(d)}}},f=function(e,t){var r=(0,n.path)(["soul","pattern"],t),i=r&&new o.default(r);return function(t){var r=(0,n.path)(["_","#"],t),o=i.match(r)||{};return!(0,n.keys)(e).find(function(r){return r in t&&(0,n.prop)(r,o)!==(0,n.prop)((0,n.prop)(r,e),t)})}},y=function(e){return function(e){return function(t,r,o,i){return!e||(0,n.prop)("#",t)===i}}};function m(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.coerceTypes,r=void 0===t||t,n=e.removeAdditional,o=void 0!==n&&n,i=u(e,["coerceTypes","removeAdditional"]),s=new a.default({coerceTypes:r,removeAdditional:o,...i});return s.addKeyword("soul",{compile:l(s)}),s.addKeyword("edgeMatchesKey",{compile:y(s)}),s.addKeyword("propsFromSoul",{compile:f}),s}},function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t){e.exports=r},function(e,t){e.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,